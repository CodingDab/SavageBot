using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Discord.Commands;
using Discord.WebSocket;
using System.IO;

namespace SavageBot.Modules
{
    [Group("werd")]
    [Summary("A game where you try to guess a five letter word generated by the bot.")]
    public class Werd : ModuleBase<SocketCommandContext>
    {
        [Summary("Start a game.")]
        public class Start : ModuleBase<SocketCommandContext>
        {
            [Command("start")]
            public async Task StartAsync()
            {
                GuildData g_data = GuildCenter.GetGuild(Context.Guild.Id);
                if(g_data.Id == 0) // check to make sure the guild exists in memory
                {
                    GuildCenter.Guilds.Add(new GuildData(Context.Guild.Id, Context.Guild.Name));
                    g_data = GuildCenter.GetGuild(Context.Guild.Id); // no need to check this time
                }
                g_data.werdData = new WerdData(guildId: Context.Guild.Id, werd: GenerateWerd());
                g_data.werdData.gameStarted = true;
                await ReplyAsync("A five letter word has been selected! ``$rules`` to learn how to play. " +
                    "Guess away.... :smile:");
            }
        }

        [Summary("Guess a word.")]
        public class Guess : ModuleBase<SocketCommandContext>
        {
            [Command("guess")]
            public async Task GuessAsync(string guess_)
            {
                string guess = guess_.ToLower();
                GuildData g_data = GuildCenter.GetGuild(Context.Guild.Id);
                
                if (g_data.werdData.gameStarted)
                {
                    bool notYetEncountered = false;
                    foreach(var user in g_data.werdData.players)
                    {
                        if (user.Id == Context.User.Id)
                        {
                            notYetEncountered = false;
                            break;
                        }
                        else notYetEncountered = true;
                    }
                    if(notYetEncountered)
                    {
                        g_data.werdData.players.Add(Context.User);
                    }
                    if (guess.Length != 5)
                        await ReplyAsync("It's a *five* letter werd! Get it, *got it?*, **good.**");
                    else if (g_data.werdData.werd == guess)
                    {
                        g_data.werdData.gameStarted = false;
                        await ReplyAsync($"{Context.User.Mention} guessed the word! Now, I can take a nap... :smirk:");
                    }
                    else if (!IsRealWerd(guess))
                        await ReplyAsync($"{Context.User.Mention} that's not even a word bruh." +
                            $" Don't fuck with me. *Wastin' my time.....*");
                    else
                        await ReplyAsync($"{Context.User.Mention}, your guess earned {Werd.CalculatePoints(guess, g_data.werdData)} points. *Next.*");
                }
                else
                {
                    await ReplyAsync("A game is not in progress in this guild. You have to start one before you can play. :expressionless:");
                }
            }
        }

        [Summary("End the current game.")]
        [RequireUserPermission(Discord.GuildPermission.Administrator)] // only admins can end a game prematurely unless a vote is passed
        public class End : ModuleBase<SocketCommandContext>
        {
            [Command("end")]
            public async Task EndAsync()
            {
                GuildCenter.GetGuild(Context.Guild.Id).werdData.gameStarted = false;
                await ReplyAsync("The game has ended.");
            }
        }

        [Summary("Vote to end the game.")]
        public class Vote : ModuleBase<SocketCommandContext>
        {
            [Command("vote")]
            public async Task VoteAsync()
            {
                GuildData g_data = new GuildData(0,""); // necessary in order for the code to compile
                g_data = GuildCenter.GetGuild(Context.Guild.Id);
                if (g_data.werdData.gameStarted)
                {
                    if (g_data.werdData.votes >= g_data.werdData.players.Count / 3 * 2)
                    {   // if 2/3 of the players vote to end the game it can end without admin intervention
                        g_data.werdData.gameStarted = false;
                        await ReplyAsync($"The vote to end the game has passed.");
                        await ReplyAsync("Game over.", true); // experimental
                        return;
                    }
                    else
                    {
                        g_data.werdData.votes++;
                    }
                }
                else await ReplyAsync($"{Context.User.Mention} ... erm... You can't vote to end a match that doesn't exist...\n"
                    + $"My faith in mankind has just lowered considerably :face_palm:");
            }
        }

        public static string GenerateWerd()
        {
            Random rng = new Random();
            int line = (int)((5757-1) * rng.NextDouble()); // 5757 werds in the file

            FileStream werd_list = File.OpenRead("../../werds.txt");
            werd_list.Seek(6 * line, SeekOrigin.Begin);

            byte[] buffer = new byte[5];
            werd_list.Read(buffer, 0, 5);

            return Encoding.Default.GetString(buffer);
        }

        public static int CalculatePoints(string guess, WerdData werdData)
        {
            List<int> elementIndices = new List<int>();
            int points = 0;
            for(int i = 0; i < 5; i++)
            {
                for(int j = 0; j < 5; j++)
                {
                    if(guess.ElementAt(i) == werdData.werd.ElementAt(j))
                    {
                        points++;
                        if (i == j) points++; // add another point (the letter in guess earned 2 points
                        else continue;
                    }
                }
            }
            return points;
        }

        public static bool IsRealWerd(string guess)
        {
            for(int i = 0; i < 5757 - 1; i++)
            {
                FileStream werd_list = File.OpenRead("../../werds.txt");
                werd_list.Seek(6 * i, SeekOrigin.Begin); // loop through every line in the file

                byte[] buffer = new byte[5];
                werd_list.Read(buffer, 0, 5);

                string x = Encoding.Default.GetString(buffer);

                if (guess == x) return true;
            }

            return false;
        }
    }
}
